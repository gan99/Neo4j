client_360_view:
  display_name: "Client 360 Drilldown"
  description: "Aggregated drill-down from Client to Prospect."
  enabled: true
  # Use a new property 'display_name' for our aggregated labels
  caption_property: "display_name"
  mapping:
    # Make node size relative to totalAmount
    node_size: "totalAmount"
    # Make edge width relative to txCount
    edge_weight: "txCount"
  table_display:
    _default: ["name", "totalAmount", "txCount"]

  primary: >
    // L0: Find Clients and show their grand totals
    MATCH (n:Client)
    WHERE (n.name CONTAINS $text_search OR $text_search IS NULL OR n.clientId = $text_search)
   
    // Get all related aggregates
    MATCH (n)<-[:FOR_CLIENT]-(agg:AggTx)
    WITH n, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
   
    // Set properties on the node for sizing and display
    SET n.totalAmount = totalAmount, n.txCount = txCount
    SET n.display_name = n.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
   
    RETURN n
    ORDER BY totalAmount DESC
    LIMIT toInteger($limit)

  neighbors:
    _default: >
      // L1: Client -> DepositProduct
      // $node_id is the elementId of the Client that was clicked
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      WHERE elementId(c) = $node_id
     
      // Aggregate totals for this path
      WITH c, dp, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      // Set properties on the DepositProduct node for this query
      SET dp.totalAmount = totalAmount, dp.txCount = txCount
      SET dp.display_name = dp.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      // Create a virtual relationship to return
      CALL apoc.create.vRelationship(c, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, dp) YIELD rel
      RETURN c, rel, dp

    DepositProduct: >
      // L2: DepositProduct -> Flow
      // $node_id is the DepositProduct. We get Client from the history params.
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      WHERE elementId(dp) = $node_id AND elementId(c) = $Client_node_id
     
      MATCH (agg)-[:FOR_FLOW]->(f)
     
      WITH dp, f, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      SET f.totalAmount = totalAmount, f.txCount = txCount
      SET f.display_name = f.direction + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      CALL apoc.create.vRelationship(dp, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, f) YIELD rel
      RETURN dp, rel, f

    Flow: >
      // L3: Flow -> Channel
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      MATCH (agg)-[:FOR_FLOW]->(f)
      WHERE elementId(f) = $node_id
        AND elementId(dp) = $DepositProduct_node_id
        AND elementId(c) = $Client_node_id
     
      MATCH (agg)-[:FOR_CHANNEL]->(ch)
     
      WITH f, ch, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      SET ch.totalAmount = totalAmount, ch.txCount = txCount
      SET ch.display_name = ch.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      CALL apoc.create.vRelationship(f, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, ch) YIELD rel
      RETURN f, rel, ch

    Channel: >
      // L4: Channel -> PaymentProduct
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      MATCH (agg)-[:FOR_FLOW]->(f)
      MATCH (agg)-[:FOR_CHANNEL]->(ch)
      WHERE elementId(ch) = $node_id
        AND elementId(f) = $Flow_node_id
        AND elementId(dp) = $DepositProduct_node_id
        AND elementId(c) = $Client_node_id
     
      MATCH (agg)-[:FOR_PAYMENT_PRODUCT]->(pp)
     
      WITH ch, pp, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      SET pp.totalAmount = totalAmount, pp.txCount = txCount
      SET pp.display_name = pp.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      CALL apoc.create.vRelationship(ch, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, pp) YIELD rel
      RETURN ch, rel, pp

    PaymentProduct: >
      // L5: PaymentProduct -> FinancialInstitution
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      MATCH (agg)-[:FOR_FLOW]->(f)
      MATCH (agg)-[:FOR_CHANNEL]->(ch)
      MATCH (agg)-[:FOR_PAYMENT_PRODUCT]->(pp)
      WHERE elementId(pp) = $node_id
        AND elementId(ch) = $Channel_node_id
        AND elementId(f) = $Flow_node_id
        AND elementId(dp) = $DepositProduct_node_id
        AND elementId(c) = $Client_node_id
     
      MATCH (agg)-[:FOR_FI]->(fi)
     
      WITH pp, fi, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      SET fi.totalAmount = totalAmount, fi.txCount = txCount
      SET fi.display_name = fi.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      CALL apoc.create.vRelationship(pp, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, fi) YIELD rel
      RETURN pp, rel, fi

    FinancialInstitution: >
      // L6: FinancialInstitution -> Prospect
      MATCH (c:Client)<-[:FOR_CLIENT]-(agg:AggTx)-[:FOR_DEPOSIT_PRODUCT]->(dp)
      MATCH (agg)-[:FOR_FLOW]->(f)
      MATCH (agg)-[:FOR_CHANNEL]->(ch)
      MATCH (agg)-[:FOR_PAYMENT_PRODUCT]->(pp)
      MATCH (agg)-[:FOR_FI]->(fi)
      WHERE elementId(fi) = $node_id
        AND elementId(pp) = $PaymentProduct_node_id
        AND elementId(ch) = $Channel_node_id
        AND elementId(f) = $Flow_node_id
        AND elementId(dp) = $DepositProduct_node_id
        AND elementId(c) = $Client_node_id
     
      MATCH (agg)-[:FOR_PROSPECT]->(p)
     
      WITH fi, p, sum(agg.totalAmount) AS totalAmount, sum(agg.txCount) AS txCount
     
      SET p.totalAmount = totalAmount, p.txCount = txCount
      SET p.display_name = p.name + ' (' + txCount + ' txns, $' + apoc.number.format(totalAmount) + ')'
     
      CALL apoc.create.vRelationship(fi, 'AGG_TO', {totalAmount: totalAmount, txCount: txCount}, p) YIELD rel
      RETURN fi, rel, p
