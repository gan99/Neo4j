<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Party ↔ Party + FI (Dataiku ↔ Neo4j)</title>
  <style>
    body { margin: 0; font: 14px/1.3 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Arial; }
    #toolbar { padding: 10px; border-bottom: 1px solid #eee; display: flex; gap: 8px; align-items: center; }
    #graph { width: 100vw; height: calc(100vh - 60px); }
    textarea { width: 600px; height: 80px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }
    button { padding: 6px 10px; border-radius: 8px; border: 1px solid #ddd; background: #fafafa; cursor: pointer; }
  </style>
  <!-- vis-network -->
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
</head>
<body>
  <div id="toolbar">
    <button id="btnRun">Run</button>
    <button id="btnReset">Reset default</button>
    <textarea id="cypher" placeholder="Optional: custom Cypher to POST to /api/graph"></textarea>
  </div>
  <div id="graph"></div>

  <script>
    const container = document.getElementById('graph');
    let nodes = new vis.DataSet([]);
    let edges = new vis.DataSet([]);
    let network = new vis.Network(container, { nodes, edges }, {
      physics: { stabilization: true },
      interaction: { hover: true },
      edges: { smooth: false, arrows: { to: false } }
    });

    const DEFAULT_CYPHER = `
MATCH (p:Party)-[r:INTERACTS]-(q:Party)
WHERE id(p) < id(q)
OPTIONAL MATCH (p)-[rc1:CONNECTED_TO_FI|IS_CUSTOMER_OF]->(fi1:FinancialInstitution)
OPTIONAL MATCH (q)-[rc2:CONNECTED_TO_FI|IS_CUSTOMER_OF]->(fi2:FinancialInstitution)
RETURN  id(p)  AS p_id,  p.party_name  AS p_name,
        id(q)  AS q_id,  q.party_name  AS q_name,
        r.total_amount AS total_amount, r.count AS tx_count,
        id(fi1) AS fi1_id, fi1.fi_name_std AS fi1_name,
        id(fi2) AS fi2_id, fi2.fi_name_std AS fi2_name,
        rc1.isBMO AS p_is_bmo, rc2.isBMO AS q_is_bmo
ORDER BY total_amount DESC
LIMIT 300
`.trim();

    const $cypher = document.getElementById('cypher');
    $cypher.value = "";

    async function run(cypher) {
      const res = await fetch("api/graph", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({ cypher: cypher && cypher.trim() ? cypher : undefined })
      });
      const data = await res.json();
      nodes.clear(); edges.clear();
      nodes.add(data.nodes || []);
      edges.add(data.edges || []);
      network.fit({ animation: true });
    }

    document.getElementById('btnRun').onclick = () => run($cypher.value);
    document.getElementById('btnReset').onclick = () => { $cypher.value = ""; run(""); };

    // initial render
    run("");
  </script>
</body>
</html>
